---
import { themeConfig } from '@/config'
import AdminLayout from '@/layouts/AdminLayout.astro'
import type { AdminLayoutProps } from '@/types'

const { id } = Astro.params

const props: AdminLayoutProps = {
  title: 'Edit Post',
  description: 'Edit blog post',
  config: themeConfig
}
---

<AdminLayout {...props}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="mb-8 text-3xl font-bold">Edit Post</h1>
    <form id="post-form" class="space-y-6">
      <div>
        <label for="title" class="mb-2 block text-sm font-medium">Title</label>
        <input
          type="text"
          id="title"
          name="title"
          class="w-full rounded-lg border p-2"
          required
        />
      </div>
      <div>
        <label for="content" class="mb-2 block text-sm font-medium">Content</label>
        <textarea
          id="content"
          name="content"
          rows="10"
          class="w-full rounded-lg border p-2"
          required></textarea>
      </div>
      <div>
        <label for="categories" class="mb-2 block text-sm font-medium"
          >Categories</label
        >
        <input
          type="text"
          id="categories"
          name="categories"
          class="w-full rounded-lg border p-2"
          placeholder="Comma-separated categories"
        />
      </div>
      <div>
        <label for="tags" class="mb-2 block text-sm font-medium">Tags</label>
        <input
          type="text"
          id="tags"
          name="tags"
          class="w-full rounded-lg border p-2"
          placeholder="Comma-separated tags"
        />
      </div>
      <div>
        <label for="draft" class="inline-flex items-center">
          <input
            type="checkbox"
            id="draft"
            name="draft"
            class="rounded border-gray-300"
          />
          <span class="ml-2 text-sm">Save as draft</span>
        </label>
      </div>
      <div class="flex space-x-4">
        <button
          type="submit"
          class="rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600"
        >
          Update Post
        </button>
        <button
          type="button"
          id="delete-btn"
          class="rounded-lg bg-red-500 px-4 py-2 text-white hover:bg-red-600"
        >
          Delete Post
        </button>
      </div>
    </form>
  </div>
</AdminLayout>

<script define:vars={{ id }}>
  const form = document.querySelector('#post-form')
  const deleteBtn = document.querySelector('#delete-btn')

  // Load post data
  async function loadPost() {
    try {
      const response = await fetch(`/api/posts/${id}`)
      if (response.ok) {
        const post = await response.json()
        
        const titleInput = document.querySelector('#title')
        const contentInput = document.querySelector('#content')
        const categoriesInput = document.querySelector('#categories')
        const tagsInput = document.querySelector('#tags')
        const draftInput = document.querySelector('#draft')

        if (titleInput) titleInput.value = post.title
        if (contentInput) contentInput.value = post.content
        if (categoriesInput) categoriesInput.value = post.categories?.join(', ') || ''
        if (tagsInput) tagsInput.value = post.tags?.join(', ') || ''
        if (draftInput) draftInput.checked = post.draft
      }
    } catch (error) {
      console.error('Error loading post:', error)
    }
  }

  loadPost()

  // Handle form submit
  form?.addEventListener('submit', async (e) => {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)

    const data = {
      title: formData.get('title'),
      content: formData.get('content'),
      categories: formData.get('categories')?.toString().split(',').map(c => c.trim()),
      tags: formData.get('tags')?.toString().split(',').map(t => t.trim()),
      draft: formData.get('draft') === 'on'
    }

    try {
      const response = await fetch(`/api/posts/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })

      if (response.ok) {
        window.location.href = '/admin/posts'
      } else {
        console.error('Failed to update post')
      }
    } catch (error) {
      console.error('Error updating post:', error)
    }
  })

  // Handle delete
  deleteBtn?.addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete this post?')) {
      try {
        const response = await fetch(`/api/posts/${id}`, {
          method: 'DELETE'
        })

        if (response.ok) {
          window.location.href = '/admin/posts'
        } else {
          console.error('Failed to delete post')
        }
      } catch (error) {
        console.error('Error deleting post:', error)
      }
    }
  })
</script>
