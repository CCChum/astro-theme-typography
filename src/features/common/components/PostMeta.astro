---
import type { Post } from '@/types'
import { useTranslations } from '@/i18n'
import { formatDate } from '@/utils'

export interface Props {
  post: Post
}

const { post } = Astro.props
const { language } = Astro.locals
const { t } = useTranslations(language || 'en')

const date = formatDate(post.data.updatedDate || post.data.pubDate)
const readingTime = Math.ceil(post.body.split(/\s+/).length / 200)
const categories = post.data.categories || []
const tags = post.data.tags || []
---

<header flex="~ col gap-2">
  <h1 class="post-title">
    <a class="not-prose" href={`/posts/${post.id}/`}>{post.data.title}</a>
  </h1>
  <div class="text-3.5">
    <div class="flex flex-wrap gap-2 text-sm text-gray-500">
      <time datetime={post.data.pubDate.toISOString()}>{date}</time>
      <span>路</span>
      <span>{readingTime} {t('post.minuteRead')}</span>

      {categories.length > 0 && (
        <>
          <span>路</span>
          <span>
            {categories.map((category, index) => (
              <>
                <a
                  href={`/categories/${category}`}
                  class="hover:text-primary"
                >
                  {category}
                </a>
                {index < categories.length - 1 && ', '}
              </>
            ))}
          </span>
        </>
      )}

      {tags.length > 0 && (
        <>
          <span>路</span>
          <span>
            {tags.map((tag, index) => (
              <>
                <a
                  href={`/tags/${tag}`}
                  class="hover:text-primary"
                >
                  #{tag}
                </a>
                {index < tags.length - 1 && ' '}
              </>
            ))}
          </span>
        </>
      )}

      {post.data.updatedDate && (
        <>
          <span>路</span>
          <time datetime={post.data.updatedDate.toISOString()}>
            {t('post.updated')} {formatDate(post.data.updatedDate)}
          </time>
        </>
      )}
    </div>
  </div>
</header>
