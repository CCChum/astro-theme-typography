---
import { useTranslations } from '@/i18n'
import { themeConfig } from '@/config'

const { language } = Astro.locals
const { t } = useTranslations(language || 'en')
---

<button
  id="theme-toggle"
  type="button"
  class="inline-flex h-9 w-9 items-center justify-center rounded-lg p-2.5 text-sm text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
  aria-label={t('theme.toggle')}
>
  <svg
    id="theme-toggle-dark-icon"
    class="hidden h-4 w-4"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    />
  </svg>
  <svg
    id="theme-toggle-light-icon"
    class="hidden h-4 w-4"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    />
  </svg>
  <svg
    id="theme-toggle-system-icon"
    class="hidden h-4 w-4"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
    />
  </svg>
</button>

<script>
  const button = document.getElementById('theme-toggle')
  const darkIcon = document.getElementById('theme-toggle-dark-icon')
  const lightIcon = document.getElementById('theme-toggle-light-icon')
  const systemIcon = document.getElementById('theme-toggle-system-icon')

  function setTheme(theme: 'light' | 'dark' | 'system') {
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
      document.documentElement.classList.remove('light', 'dark')
      document.documentElement.classList.add(systemTheme)
      localStorage.removeItem('theme')
    } else {
      document.documentElement.classList.remove('light', 'dark')
      document.documentElement.classList.add(theme)
      localStorage.setItem('theme', theme)
    }

    updateIcon(theme)
  }

  function updateIcon(theme: 'light' | 'dark' | 'system') {
    darkIcon?.classList.add('hidden')
    lightIcon?.classList.add('hidden')
    systemIcon?.classList.add('hidden')

    switch (theme) {
      case 'dark':
        lightIcon?.classList.remove('hidden')
        break
      case 'light':
        darkIcon?.classList.remove('hidden')
        break
      case 'system':
        systemIcon?.classList.remove('hidden')
        break
    }
  }

  function getTheme(): 'light' | 'dark' | 'system' {
    const theme = localStorage.getItem('theme')
    return (theme as 'light' | 'dark' | 'system') || 'system'
  }

  // Initialize theme
  const currentTheme = getTheme()
  setTheme(currentTheme)

  // Handle click
  button?.addEventListener('click', () => {
    const currentTheme = getTheme()
    const themes: Array<'light' | 'dark' | 'system'> = ['light', 'dark', 'system']
    const nextIndex = (themes.indexOf(currentTheme) + 1) % themes.length
    const nextTheme = themes[nextIndex]
    setTheme(nextTheme)
  })

  // Handle system theme change
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (getTheme() === 'system') {
      setTheme('system')
    }
  })
</script>
